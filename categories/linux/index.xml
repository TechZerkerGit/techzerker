<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Linux - Category - TechZerker</title><link>https://techzerker.com/categories/linux/</link><description>Linux - Category - TechZerker</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 24 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://techzerker.com/categories/linux/" rel="self" type="application/rss+xml"/><item><title>Arch Linux â€“ Conflicting Files and the Arch Wiki</title><link>https://techzerker.com/2020-04-24-arch-wiki-conflicts/</link><pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://techzerker.com/2020-04-24-arch-wiki-conflicts/</guid><description><![CDATA[<p>It is no secret that my favorite distro for Linux after much trial and error, landed on <a href="https://archlinux.org" target="_blank" rel="noopener noreffer">Arch Linux</a>.</p>
<p>I found I prefer the rolling release model vs major version upgrades and the AUR (Arch User Repository) is incredible for finding and installing packages. That being said, it&rsquo;s biggest win is the <a href="https://wiki.archlinux.org/" target="_blank" rel="noopener noreffer">Arch Wiki</a>. I find however, that no matter how often that is repeated in the Arch circles, you still find forums full of solutions that the Arch Wiki covers better, or even conflict the Wiki.</p>
<p>I wrote this today, because I saw that example again in searching, where probably due to some previous mistake, when I went to update my system today, I was getting a failure for a pair of conflicting packages, which prevents updating as part of Arch giving you a chance to make sure you know what your doing&hellip;</p>
<p>A search for <a href="https://duckduckgo.com/?q=arch&#43;pacman&#43;%2B&#43;conflicting&#43;files" target="_blank" rel="noopener noreffer"><em>Arch Pacman + Conflicting Files</em></a> returns all sorts of results, from various BBS Sites, Reddit, and Forums, with the Arch Wiki nestled tightly among them.</p>
<p>However, in a rather large number of the forums I took a quick browse at, were suggestions like: <code>pacman -Syuf</code> and <code>pacman -Suf</code>, among others, which most importantly are encouraging the <code>f</code> <em>force</em> flag. In some cases, other responses speak up right away much as I am, and suggest not taking that approach, as it&rsquo;s a very strong-handed and dangerous approach to updating an Arch system.</p>
<p>Sure enough, in a bunch of cases (not a scientific sampling), there are follow-up posts of panic stricken users, who range from <em>system won&rsquo;t boot</em> to <em>pacman is completely broken</em>, and other results. Where a quick search for this same problem to the Arch Wiki, leads you down the <em>Pacman</em> page to it&rsquo;s <a href="https://wiki.archlinux.org/index.php/Pacman#%22Failed_to_commit_transaction_%28conflicting_files%29%22_error" target="_blank" rel="noopener noreffer">troubleshooting section</a>.</p>
<p>The core solution detailed:</p>
<blockquote>
<p>This is happening because pacman has detected a file conflict, and by design, will not overwrite files for you. This is by design, not a flaw.</p>
<p>The problem is usually trivial to solve. A safe way is to first check if another package owns the file (<code>pacman -Qo /path/to/file</code>). If the file is owned by another package, file a bug report. If the file is not owned by another package, rename the file which &lsquo;exists in filesystem&rsquo; and re-issue the update command. If all goes well, the file may then be removed.</p>
</blockquote>
<p>Sure enough, in my case, I ran <code>pacman -Qo /usr/lib/thefileinquestion</code>, and it returned that no package owned that file. So following the wiki, I did a quick rename of that file (not delete, in case it does end up being needed!). I re-ran my update process, no conflicts, and everything appears to be working! Simple :)</p>
<p>In the case of Arch, when in doubt, <em>start</em> with the <a href="https://wiki.archlinux.org/" target="_blank" rel="noopener noreffer">Arch Wiki</a>, and then ask for elaborations on those solutions if they are not working, or not solving your problem, and you likely will save yourself a lot of headache!</p>
<p>I even went so far for a while, as to run one of my self-hosted servers on <a href="https://www.vultr.com/?ref=7975115" target="_blank" rel="noopener noreffer">Vultr</a> on Arch, given they allowed custom ISOs! It is not always the best solution for a server, depending on the applications running, but its worth evaluating, and again, it&rsquo;s hard to fault the documentation power of the Wiki.</p>]]></description></item><item><title>Running i3 Desktop with WSL on Windows 10</title><link>https://techzerker.com/2020-04-19-wsl-i3-windows/</link><pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://techzerker.com/2020-04-19-wsl-i3-windows/</guid><description><![CDATA[<p>While all my personal systems are exclusively running Linux, as is the nature of working in most IT Support roles, the base of my shared company workstation in the office is <em>Windows 10</em>.</p>
<p>After a bunch of article reading, research and testing, this is a quick summary of what I use to have what has worked for me as a fully functioning <a href="https://i3wm.org/" target="_blank" rel="noopener noreffer">i3</a> graphical desktop, running via WSL (Windows Subsystem for Linux) on a functioning X-Server. For me at least, I&rsquo;ve found it works much better than when I tried to have a VM running on the workstation, as it&rsquo;s far from new or high performance.</p>
<p>I won&rsquo;t re-hash instructions that are widely available for getting the base WSL system installed and running, as it&rsquo;s pretty straight forward to get WSL feature enabled, and then go through the process to in my case, setup the Ubuntu WSL version straight from the Windows Store.</p>
<p>Once you have that up and running, so that you can get to your basic WSL command prompt&hellip;</p>
<p></p>
<p>Obviously in my example, I&rsquo;ve added a few things to my <em>.bashrc</em>, and in windows I&rsquo;ve told it to let this window be a bit transparent.</p>
<p>Next up, you need a functioning X Server on windows that we can use to create the display. I tried a few, but in the end had the best luck with <a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="noopener noreffer">VcXsrv</a>, which you can download from that link at <em>SourceForge</em>. No special instructions needed beyond getting it installed, ideally in the default paths.</p>
<p>Once that is installed, you can also go ahead and install your DE (Desktop Environment) in your WSL install. In my case, because it&rsquo;s my preference and it&rsquo;s light weight, I stuck with <strong>i3</strong>, so that&rsquo;s what I&rsquo;ve tested here. That means your mileage may vary with other DE&rsquo;s. No special considerations for the install, in this case it was a standard <code>apt install i3</code> on a fully updated system.</p>
<p>Now comes the fun part of pulling it all together, these scripts are dirty and simple, I guarantee someone could write them to be cleaner or better looking, but they were written just for myself originally to this end. On my desktop I have:</p>
<p><strong>wsl.vbs</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">&#39; This script is meant to be launched from the Windows side, to start up a decorationless
&#39; VcXsrv container for the environment.
&#39;
&#39; You may need to change this to reflect your VcXsrv install path as well as screen resolution.
&#39; Then after the VcXsrv container is running, it pulls the WSL Ubuntu into it, along with a launch script.

Set shell = CreateObject(&#34;WScript.Shell&#34; ) 
shell.Run &#34;&#34;&#34;C:\Program Files\VcXsrv\vcxsrv.exe&#34;&#34; :0 -screen 0 @1 -ac +xinerama -engine 1 -nodecoration -wgl&#34;
WScript.Sleep 200
shell.Run &#34;ubuntu -c &#34;&#34;~/.scripts/wlaunch&#34;&#34;&#34;, 0
</code></pre></td></tr></table>
</div>
</div><p>Following that, before this actually works, as you can see, inside my WSL Ubuntu home directory, I&rsquo;m calling a script called <em>wlaunch</em>:</p>
<p><strong>wlaunch</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="c1"># meant to be run with `bash -c &#34;/path/to/wlaunch&#34;` when running from e.g. a Windows shortcut</span>

<span class="c1"># explicitly needed when launching with bash -c from Windows</span>
<span class="nb">source</span> ~/.bashrc
<span class="nb">export</span> <span class="nv">DISPLAY</span><span class="o">=</span>:0
i3
</code></pre></td></tr></table>
</div>
</div><p>Obviously, replace the last line calling i3 with something else if you are using a different environment, like XFCE, which I have not tested.</p>
<p>When that&rsquo;s all in place, all things being equal, you should be able to run <em>wsl.vbs</em>, and after a few seconds, be staring at your desktop environment! In my case, because its i3, I have beyond that heavily setup my own i3 config files, polybar, etc. for the look I want:</p>
<p></p>
<p>After more than a year of this setup, I have yet to have any issues with any program. I&rsquo;ve run things like Sublime Text, Firefox and Spacemacs all within this desktop environment without any issues, and with way better performance than I had on a VM. For easy workflow between the base Windows 10 system and this WSL i3, I&rsquo;ve simply created symlinks for my core folders like <em>Documents</em> and my mapped network drive, given all drives in WSL1 are available at <strong>/mnt/driveletter</strong></p>
<p>Hopefully this article was helpful to those that need it, it&rsquo;s certainly made my day to day usage on a Windows 10 machine be that much less&hellip;well&hellip;Windows!</p>
<p>If this article was helpful, and you&rsquo;re looking for more tools to help you work from home, even if you have to use Windows 10, why not check out <a href="https://www.humblebundle.com/software/work-remote-software?partner=techzerker" target="_blank" rel="noopener noreffer">Humble Bundles <em>Remote Work</em> Bundle</a>, or take the rest of the day off, and catch up on some <a href="https://www.humblebundle.com/software/work-remote-software?partner=techzerker" target="_blank" rel="noopener noreffer">Warhammer 40k Black Library</a> reading.</p>]]></description></item><item><title>Pixelfed with Docker and Nginx Reverse Proxy</title><link>https://techzerker.com/2020-03-02-pixelfed-docker-nginx/</link><pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://techzerker.com/2020-03-02-pixelfed-docker-nginx/</guid><description><![CDATA[<p>As I have continued my expansion into self-hosting as well as the fediverse, the one challenge I still had was image posting and sharing in an <em>easy</em> and clean looking way. For images on websites like this, especially from a mobile device, FTP uploading has just been inconvenient and disrupts the focused writing activity.</p>
<p>I had already dabbled a bit in <a href="https://pixelfed.org" target="_blank" rel="noopener noreffer">Pixelfed</a>, by joining <a href="https://pixelfed.social" target="_blank" rel="noopener noreffer">Pixelfed.Social</a> when it was still open for registration. This let me test the functionality for a service similar to Instagram or Imgr, but without ads or tracking. The final leap was setting it up self-hosted so that I could fully own that image data.</p>
<p></p>
<p>On my Arch VPS that I host on <a href="https://www.vultr.com/?ref=7975115" target="_blank" rel="noopener noreffer">Vultr</a>, I had already tried in previous weeks to direct install Pixelfed. Unfortunately, likely because of other self-hosted apps or packages in place, it was a struggle and I just could not get Pixelfed fully operational. In steps Docker, and the <a href="https://jonnev.se/pixelfed-beta-with-docker-and-traefik/" target="_blank" rel="noopener noreffer">article here</a> that inspired this updated version with what I had to do differently, as well as more details on the Nginx reverse proxy portion.</p>
<p><em>If you are interested in using Vultr to host a VPS for this or any other self-hosted projects, depending on your project size and plans, you can either get <a href="https://www.vultr.com/?ref=7975115" target="_blank" rel="noopener noreffer">$10 of VPS Credit</a> for a small project, or if you&rsquo;re looking for a larger project, you can get <a href="https://www.vultr.com/?ref=8473015-6G" target="_blank" rel="noopener noreffer">$100 of VPS Credit for 30 days</a>. Both help me out and keep tracking based ads and services off my site.</em></p>
<h2 id="requirements">Requirements</h2>
<ul>
<li>VPS <a href="https://plusbryan.com/my-first-5-minutes-on-a-server-or-essential-security-for-linux-servers" target="_blank" rel="noopener noreffer">Operational &amp; Secure</a></li>
<li>Docker &amp; Docker-Compose Installed</li>
<li>Nginx Installed</li>
<li><a href="https://www.cloudflare.com/en-ca/products/registrar/" target="_blank" rel="noopener noreffer">Domain Name</a> Setup, and Ideally SSL Certificates ready</li>
</ul>
<p><em>Of note, in this install, Nginx is direct installed on the host, as it fit with my existing environment. It is also common to deploy Nginx with Docker as well, which would change these instructions to some extent.</em></p>
<h2 id="pixelfed-setup">Pixelfed Setup</h2>
<p>The Pixelfed install will be built directly as a new image, as similar to Jon in the article I referenced, the only pre-built docker images while recent, had no details or notes, so did not inspire the most confidence. Ideally, the steps below should all be run as a non-root user that has <em>Sudo</em> capability.</p>
<p>First, a directory to pull the source to, using /opt/ is a good best practice vs. installing it to a specific users /home directory.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo mkdir -p /opt/pixelfed_source
sudo chown $USER:$USER /opt_pixelfed_source
</code></pre></td></tr></table>
</div>
</div><p>Next is pulling down the repository, in my case it&rsquo;s been active development, so I just pulled the most recent, but you can also pull an older <em>stable</em> build too if you prefer.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">git clone https://github.com/pixelfed/pixelfed.git /opt/pixelfed_source
cd /opt/pixelfed_source
git checkout dev
</code></pre></td></tr></table>
</div>
</div><p>This was the first difference I had to work through, where just trying a straight <em>docker build</em> was failing, because in the current versions, the <em>dockerfile</em> files are not in the root, so the command to build has to be updated to reflect that. I also tagged my build with the pull date, given it&rsquo;s dev so does not have a release number (like v0.10.8) and a commit tag is long and ugly.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">docker build . -t pixelfed:20200302 -f contrib/docker/Dockerfile.apache
</code></pre></td></tr></table>
</div>
</div><p>There is also a <em>Dockerfile.fpm</em> file there for a php-fpm based version, but as of this writing date, I confirmed it is not complete/functioning yet.</p>
<p>Once the docker has built, we can create a directory that the docker compose will run from, which will contain it&rsquo;s settings, as well as the Pixelfed .env settings file.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo mkdir -p /opt/pixelfed
sudo chown $USER:$USER /opt/pixelfed
cd /opt/pixelfed
</code></pre></td></tr></table>
</div>
</div><p>To copy the example configuration file over:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">cp ../pixelfed_source/.env.example .env
nano .env
</code></pre></td></tr></table>
</div>
</div><p>Rather then snippets of key settings, I&rsquo;m removing sensitive parts and posting up my entire .env config file, as the parts I struggled with the most were the ones where documentation is still a work in progress. Like the article I learned from, I stuck with pgsql within Docker.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">APP_NAME=&#34;Pixelfed&#34;
APP_ENV=production
APP_KEY=**blank, we&#39;ll generate this further down**
APP_DEBUG=false

APP_URL=https://**your-domain.name**
APP_DOMAIN=&#34;**your-domain.name**&#34;
ADMIN_DOMAIN=&#34;**your-domain.name**&#34;
SESSION_DOMAIN=&#34;**your-domain.name**&#34;
TRUST_PROXIES=&#34;*&#34;

LOG_CHANNEL=stack

DB_CONNECTION=pgsql
DB_HOST=db
DB_PORT=5432
DB_DATABASE=pixelfed
DB_USERNAME=pixelfed
DB_PASSWORD=**create a proper secure password!**

BROADCAST_DRIVER=log
CACHE_DRIVER=redis
SESSION_DRIVER=redis
QUEUE_DRIVER=redis

REDIS_SCHEME=tcp
REDIS_HOST=redis
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_DRIVER=smtp
MAIL_HOST=mailtrap.io
MAIL_PORT=587
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=null
MAIL_FROM_NAME=&#34;Pixelfed&#34;

OPEN_REGISTRATION=false
ENFORCE_EMAIL_VERIFICATION=false
PF_MAX_USERS=100

MAX_PHOTO_SIZE=64000
MAX_CAPTION_LENGTH=150
MAX_ALBUM_LENGTH=4
MAX_ACCOUNT_SIZE=10000000
IMAGE_QUALITY=100

ACTIVITY_PUB=true
AP_REMOTE_FOLLOW=true
AP_INBOX=true
PF_COSTAR_ENABLED=false

HORIZON_EMBED=true
</code></pre></td></tr></table>
</div>
</div><h2 id="docker--docker-compose">Docker / Docker-Compose</h2>
<p>With that file saved and done, the next step is to setup the docker network and build the <code>docker-compose</code> file for the whole process.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">docker network create pixelfed
docker network create web

touch docker-compose.yml
nano docker-compose.yml
</code></pre></td></tr></table>
</div>
</div><p>Below is my docker compose file, with sensitive details removed and key points highlighted. Of worthy note in my install, I have host mapped the storage in place of an internal docker volume, to a Fuse S3FS mount point for my <a href="https://wasabi.com/cloud-storage-pricing/" target="_blank" rel="noopener noreffer">S3</a> storage, which will also make it easier for me to at minimum, backup the raw photo content, and it&rsquo;s cheaper storage than my VPS SSD.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">version: &#39;3&#39;
services:

  app:
    image: pixelfed:20200302
    restart: unless-stopped
    ports:
      - &#34;8080:80&#34;
    env_file:
      - ./.env
    volumes:
      - &#34;/path/to/s3-storage:/var/www/storage&#34;
      - &#34;app-bootstrap:/var/www/bootstrap&#34;
      - ./.env:/var/www/.env
    networks:
      - web
      - pixelfed

  db:
    image: postgres:9.6.4
    restart: unless-stopped
    networks:
     - pixelfed
    volumes:
     - db-data:/var/lib/postgresql/data
    environment:
     - POSTGRES_PASSWORD=${DB_PASSWORD}
     - POSTGRES_USER=${DB_USERNAME}

  worker:
    image: pixelfed:20200302
    restart: unless-stopped
    env_file:
      - ./.env
    volumes:
      - &#34;/path/to/s3-storage:/var/www/storage&#34;
      - &#34;app-bootstrap:/var/www/bootstrap&#34;
    networks:
      - web  # Required for ActivityPub
      - pixelfed
    command: gosu www-data php artisan horizon

  redis:
    image: redis:5-alpine
    restart: unless-stopped
    volumes:
      - &#34;redis-data:/data&#34;
    networks:
      - pixelfed

volumes:
  redis-data:
  app-bootstrap:
  db-data:

networks:
  pixelfed:
    internal: true
  web:
    external: true
</code></pre></td></tr></table>
</div>
</div><p>If you are already running Nginx with other services on the same server, then you may need to adjust the <em>8080</em> Port in: <code>Ports: -8080:80</code> to a different available port, and mirror that change when we get to Nginx shortly.</p>
<p>Now we should be able to spin up the image and get it ready for deployment, before we go and sort out Nginx:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">docker-compose up -d
docker-compose exec app php artisan key:generate

cat .env | grep APP_KEY 
# Make sure there&#39;s a value
</code></pre></td></tr></table>
</div>
</div><p>Then the container can be restarted, and some final Pixelfed prep tasks complete to have it ready to go.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">docker-compose restart app
docker-compose exec app php artisan config:cache
docker-compose exec app php artisan migrate
# Answer yes
</code></pre></td></tr></table>
</div>
</div><p>At this point, technically, the Pixelfed instance should be up and running, so we&rsquo;ll need to sort out the Nginx portion so we can actually access it and verify that fact!</p>
<h2 id="nginx-setup">Nginx Setup</h2>
<p>There are a few different methods I&rsquo;ve seen used for Nginx .conf file locations, but they should all work with minor tweaks. In my case, there is a .conf file for each web application in <code>/etc/nginx/conf.d/nameofapp.conf</code></p>
<p>As such, my base <code>/etc/nginx/nginx.conf</code> is default install, with just these key settings, everything else being commented out or removed.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">worker_processes  1;

error_log  logs/error.log;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    include /etc/nginx/conf.d/*.conf;
    default_type  application/octet-stream;

    sendfile        on;

    keepalive_timeout  65;

    gzip  on;
}
</code></pre></td></tr></table>
</div>
</div><p>Then I have the file, <code>/etc/nginx/conf.d/pixelfed.conf</code> setup as below, with placing your correct domain name in place, as well as the path to your certificates.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">server {
  listen 80;
  server_name **your-domain.name**;
  return 301 https://$server_name$request_uri;
  client_max_body_size 100M;
}
server {
  listen 443 ssl http2;
  server_name **your-domain.name**;
  client_max_body_size 100M;

  ssl_protocols TLSv1.1 TLSv1.2;

  # ** Adjust below to match your certs, mine were from CloudFlare, but there are plenty of guides for LetsEncrypt, etc. if you&#39;re not setting up   behind a CDN **

  ssl_certificate /etc/nginx/ssl/**your-domain.name**-tld-cert.pem;
  ssl_certificate_key /etc/nginx/ssl/**your-domain.name**-tld-key.pem;

  access_log /var/log/nginx/**your-domain.name**.log;
  location / {
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_pass http://127.0.0.1:8080;
  }
}
</code></pre></td></tr></table>
</div>
</div><p>Note the <em>client_max_body_size 100M;</em> lines, I added these after hours digging through PixelFed and PHP.ini type options because I was able to upload pictures, but only if they were under 1MB, and with a very generic <em>failure</em> error. The end solution was that Nginx by default limits file transfers to 1MB if not defined. You can define this here just for Pixelfed, or you can define it globally in the main Nginx.conf file if you prefer.</p>
<p>With the <em>pixelfed.conf</em> file generated and filled, hopefully correctly, you should now be able to restart Nginx so that it picks up the file changes. In the case of Arch (and most modern systems), it&rsquo;s using Systemd, so:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo systemctl restart nginx
</code></pre></td></tr></table>
</div>
</div><p>If everything at this point has been configured correct, and assuming I have not forgotten any other catch points I ran into at this stage, you should be able to visit <em><a href="https://your-domain.name">https://your-domain.name</a></em>, and get the default Pixelfed home screen.</p>
<h2 id="user-creation">User Creation</h2>
<p>If the site loaded for you, and if like myself you&rsquo;re building this primarily for private or small group usage, so turned off Open Registration, you can now use the terminal to create you first user, presumably as an admin:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">docker-compose exec app php artisan user:create
</code></pre></td></tr></table>
</div>
</div><p>That command above will walk you through several requests to build a user, including asking if the user should be an admin (probably <em>yes</em>). Of worthy note, when it asks for <strong>Over-ride manual e-mail verification</strong> (my wording might be off), enter <strong>yes</strong>. This marks the accounts e-mail as already verified, so for a small instance you don&rsquo;t have to focus on e-mail setup right away.</p>
<p>With the user created, you should be able to login and start using Pixelfed!</p>
<h2 id="outstanding-issues">Outstanding Issues</h2>
<p>The only issue I currently am still working on resolving, but it may be caused by a caching network appliance that I can&rsquo;t test bypassing right away, is <em>collections</em>.</p>
<p>On my instance when I try to create a collection, it lets me add from recent or by URL posts to a collection, and even lets me <em>Save</em> the collection. But roughly 75% of the time when I attempt to <em>Publish</em> the collection, I get a generic error message and it does not Publish. When this occurs, my reason I suspect this caching appliance I&rsquo;m stuck behind, is I can&rsquo;t even delete the half-created collection, until I wait an hour or so. Selecting delete gives me the prompt, but nothing happens even though Nginx logs show is processed and passed the command through correctly.</p>
<p>A handful of times while trying to test this, a collection created perfect without error and published. Once I&rsquo;ve been able to test this on a direct internet line, I&rsquo;ll be able to narrow down if I still have a configuration error, and/or if I have an issue I need to submit back to the Github project, given this is the Dev branch.</p>
<p>I will also add, I have not yet confirmed if <em>Federation</em> is working for me, but will be validating that when possible, and updating the article if I have to change any settings.</p>
<h2 id="updating-pixelfed">Updating Pixelfed</h2>
<p>This process I am mostly copying direct from the original article I followed, as this install has been recent enough, there have not been any updates yet for me to validate if this creates problems for me. That being said, the commands all look correct, so I don&rsquo;t anticipate issues. Before updating, especially on <em>Dev</em> branch, it&rsquo;s a good practice on your VPS to either take a backup or a snapshot <em>just in case</em>. To update to the current Dev:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">cd /opt/pixelfed_source
git checkout dev
git pull origin dev
git checkout dev
docker build . -t pixelfed:todaysdate -f contrib/docker/Dockerfile.apache
</code></pre></td></tr></table>
</div>
</div><p>Then once that has pulled and built, with the updated today&rsquo;s date to help identify it, it&rsquo;s just two lines to update in the <em>docker-compose.yml</em> file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">cd /opt/pixelfed
nano docker-compose.yml

app:
    image: pixelfed:todaysdate
  #...
  worker:
    image: pixelfed:todaysdate
</code></pre></td></tr></table>
</div>
</div><p>Then restart the docker-compose, and run the artisan migrate command. Worthy warning if you&rsquo;re new to docker, when we say restart, do <strong>not</strong> run <code>docker-compose down</code>, as that deletes this container and wipes the volume data as well, meaning the next <em>docker-compose up -d</em> would be like a fresh install (without your images or users), so:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">docker-compose up -d
docker-compose exec app php artisan migrate
# Answer yes
</code></pre></td></tr></table>
</div>
</div><h2 id="wrap-up">Wrap Up</h2>
<p>At this point, if everything worked (and I know, it often takes several attempts, this took me a while to get all sorted and running!), you should have a fully functioning PixelFed, and can either open registration, or terminal create users for your own small community to post to.</p>
<p>For updates to the Project, keep an eye on <a href="https://github.com/pixelfed/pixelfed" target="_blank" rel="noopener noreffer">Pixelfed GitHub</a>, and as they detail on that page, there is a semi-active group on their Riot Matrix.Org channel for help, which I&rsquo;ve been over-active in during my install struggles.</p>
<p>If this article was helpful and you have not yet settled on a VPS provider, you can help me out by trying <a href="https://www.vultr.com/?ref=7975115" target="_blank" rel="noopener noreffer">Vultr</a>, and we&rsquo;ll keep that whole mess of ads, data tracking, cookies and the like off this corner of the web!</p>]]></description></item><item><title>ARM Systems and the 2019 Pinebook Pro</title><link>https://techzerker.com/2020-02-18-pinebook-pro/</link><pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://techzerker.com/2020-02-18-pinebook-pro/</guid><description><![CDATA[<p>Over the last year, I&rsquo;m progressively been keeping a closer eye on ARM-based systems as they&rsquo;re growing in power and usability. I currently have a retro game system based on a <a href="https://amzn.to/38EqU8L" target="_blank" rel="noopener noreffer">Raspberry Pi 3B+</a>, and it&rsquo;s already a great system.</p>
<p>As we&rsquo;re getting into 2020, I&rsquo;m seeing a lot more articles and posts of the <a href="https://amzn.to/2UZn7yT" target="_blank" rel="noopener noreffer">Pi4</a>, at least the 4GB model, making a decent basic workstation and office computer. This is assuming that use case is similar to that of a Chromebook, focused on web and terminal type software. Along the same vein is a system like the Pinebook Pro, which has been getting a fair amount of attention for making the right decisions for a budget system that does not feel budget. I was prompted to post this tonight because I really enjoyed this longer Vice article on the Pinebook Pro and its market in general:</p>
<blockquote>
<p>The Pinebook Pro, a community-built Linux laptop that runs on ARM hardware, offers a few surprises. Fairly inexpensive, itâ€™s the perfect machine for tinkerers.</p>
</blockquote>
<blockquote>
<p><a href="https://www.vice.com/en_us/article/n7jdvd/this-dollar200-laptop-is-like-a-chromebook-you-can-hack" target="_blank" rel="noopener noreffer"><strong>This $200 Laptop Is Like a Chromebook You Can Hack</strong></a></p>
</blockquote>
<p>Currently, getting your hands on a Pinebook Pro at its original price point is challenging. The Pinebook Pro has been popular and not mass-produced, with even lower production volumes for the ISO North American keyboard variant. Knowing that, unless a new batch comes in soon, I&rsquo;ll likely acquire either a Raspberry Pi4 or a <a href="https://www.pine64.org/rockpro64/" target="_blank" rel="noopener noreffer">Pine64 - ROCKPro64</a> for a small home workstation and tinker box for <a href="ArchLinux.Org" rel="">Arch Linux</a> and i3wm.</p>
<p>When I do acquire something, I will definitely write about any projects I plan, such as a Plex media server, maybe a small in-home Minecraft box, not to mention a NAS system at some point!</p>
]]></description></item><item><title>Arch Linux: Blind Updating, PostgreSQL and MiniFlux</title><link>https://techzerker.com/2019-11-27-arch-server-updates/</link><pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate><author>Author</author><guid>https://techzerker.com/2019-11-27-arch-server-updates/</guid><description><![CDATA[<p>Among the #self-hosted projects that I run just for my own usage, I have a <a href="https://www.vultr.com/?ref=7975116-4F" target="_blank" rel="noopener noreffer">VPS server running Arch Linux</a>. (Yes, I&rsquo;m running an Arch server, instead of Ubuntu/Debian)</p>
<p>That little VPS runs a few different services:</p>
<ul>
<li>Minecraft server for a group of friends, which is the heavy memory user</li>
<li><a href="https://writefreely.org" target="_blank" rel="noopener noreffer">Write Freely</a> instances for a few subjects</li>
<li>Subsonic Music streaming server</li>
<li>Resilio Sync encrypted storage target</li>
<li>MiniFlux RSS Server/Reader</li>
</ul>
<p>In general, it ticks along without much need for attention. Usually it&rsquo;s biggest time demands are after each major Minecraft version update (11.x, 12.x, etc.) to adjust settings as it gets more and more resource hungry.</p>
<blockquote>
<p>FYI: The best solution on 14.x now has been <a href="https://papermc.io/" target="_blank" rel="noopener noreffer">PaperMC</a></p>
</blockquote>
<p>Given I work in tech and personally work with Arch Linux plenty, I make sure to run updates on the server weekly, and they almost always are pretty basic updates without much significance. Generally update with my AUR Helper, check the applications, and off I go.</p>
<p>This time around this past weekend, but only discovered last night, the updates included an update of PostgreSQL from 11.6 to 12.x. On this server, MiniFlux RSS uses PostgreSQL for it&rsquo;s backend, and it works well. However, in my past experience I have never had anything use PostgreSQL to have had much awareness about it&rsquo;s sensitivity in upgrading versions. As such, the update itself did not fail, but when I went to check my Android app which pulls from MiniFlux (via Fever API), it showed it had not pulled for several days.</p>
<p>A quick investigation showed that MiniFlux itself did not have an update, but PostgreSQL had indeed updated and the service would not start, according to systemd. A quick check in journalctl -xe, and the source was found as incompatible database versions for PostgreSQL.</p>
<p>From that point, it was thankfully not a hard fix, likely because the database for the RSS system is not that large or complex. Referring to the faithful <a href="https://wiki.archlinux.org/index.php/PostgreSQL#Upgrading_PostgreSQL" target="_blank" rel="noopener noreffer">Arch Wiki</a> sent me through a few commands to migrate the data to a backup folder, initialize a new database set under version 12, and then use the <code>pg_upgrade</code> function to upgrade the database to that version. PG_Upgrade did it&rsquo;s job without fail on the first run, and I was able to then start the PostgreSQL service, followed by a restart of the MiniFlux service.</p>
<p>All in all, not a hard process or experience, just a good reminder to keep an eye on packages updating. It&rsquo;s ideal to be aware of what you are updating, but sometimes an innocent looking update breaks things. When it&rsquo;s a hobby server, keep good backups and be willing to research the fix, and you&rsquo;ll learn a bit along the way.</p>
<p>I&rsquo;m not sure what my next project will be to add to my #Self-Hosted systems, but I&rsquo;ve started catching up on the <a href="https://selfhosted.show/" target="_blank" rel="noopener noreffer">Self-Hosted Podcast</a> from Jupiter Broadcasting, so I&rsquo;m sure I&rsquo;ll discover something new!</p>
<p>If you don&rsquo;t yet #Self-Host and are looking for a project, I run my projects currently on Vultr, and sticking with plain <a href="https://www.vultr.com/?ref=7975116-4F" target="_blank" rel="noopener noreffer">direct referral link</a>, you can help me out by giving <a href="https://www.vultr.com/?ref=7975116-4F" target="_blank" rel="noopener noreffer">Vultr</a> a try with $50 worth of hosting, and it helps me out as well.</p>
<blockquote>
<p>I have a About / Privacy page linked at the top where I talk about my privacy rules: Text only referral links, no cookies/trackers, no ugly banners or graphics interrupting the writing.</p>
</blockquote>]]></description></item><item><title>Elementary OS 5 (Juno) Review</title><link>https://techzerker.com/2019-08-02-elementary-5-review/</link><pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate><author>Author</author><guid>https://techzerker.com/2019-08-02-elementary-5-review/</guid><description><![CDATA[<p>When I first really transitioned into the Linux world from Windows, I started with Ubuntu. That is a very common introductory point for many, or was, and from there I was an aggressive distro-hopper. I shifted through the Kubuntu&rsquo;s and Xubuntu&rsquo;s of the day, into ArchLabs on one laptop. At some point about two years ago took a stop at <a href="https://elementary.io" target="_blank" rel="noopener noreffer"><em>elementary OS</em></a> in it&rsquo;s 0.4 version (just one version before 5, they dropped the decimals).</p>
<p>When I first ran elementary OS 0.4, I liked the style and cohesive design. Compared to some of the distros I had tried it took some of that raw linux feel away, as far as what a normal end user might experience. Overall, I liked it and was going to install it on my main system. The full stop point I hit was the distro was based on Ubuntu 16.04 LTS. The kicker with that was the system I was using was UEFI only, and the linux kernel for 16.04 LTS did not yet natively support UEFI, nor had I discovered tools like <a href="https://www.rodsbooks.com/refind/" target="_blank" rel="noopener noreffer">ReFind</a>. As such, I continued on hopping until falling into my current Arch Linux and i3wm realm, which I&rsquo;ll talk on seperatly.</p>
<p>Forward to this past week, and I was sorting our a personal laptop for a co-worker that was collecting dust with a very disliked Windows 10 install. As a very non-tech user, I convinved him I could make the system run way better, and for his mostly browser based usage, be easier to use as well. My target was the clean looking elementary OS.</p>
<p>The install on the roughly two year old HP laptop went quick and smooth. The only mandatory post-install task that was a bit convuluted was getting to an option to enable restricted/proprietary drivers to get the broadcom wireless to work. I found <em>Juno</em> was still new enough that searching online was giving a fair volume of 0.3 and 0.4 version answers which did not directly apply to version 5.</p>
<p>With the operating system looking even cleaner and buttoned together, and now based on 18.04 LTS Ubuntu, I decided it was time to give it a try on my little travel laptop, my <a href="https://amzn.to/2YjQ4IA" target="_blank" rel="noopener noreffer">Cube i7 Book</a>.</p>
<p>
<em>(Artwork By: Scott Johnson of <a href="http://www.frogpants.com" target="_blank" rel="noopener noreffer">FrogPants Network</a></em></p>
<p>As in the past, the install was quick and easy. The installer continues to be cleaned up and simplified that it&rsquo;s honestly more confusing to fresh install Windows 10 than elementary OS. (Mostly because Windows is less informative, if at all, on the disk partition/selection screen). Additionally, the options which I took advantage of to have full drive encryption were readily available and easy to setup during the install process.</p>
<p>Once the install was completed a few minutes later, the core system was up and running, and as in the previous version, makes a great first impression. Even for an oddball system like this Cube i7 Book, all the hardware was detected and setup, inlcuding WiFi and BlueTooth.</p>
<p>For a large majority of users, at this point the system is ready for day to day usage, with a browser installed, ability to view photos and videos, setup your e-mail provider and listen to some music. Beyond that, the AppCenter is easy to navigate with both curated and non-curated sections to cover most users needs. I also like seeing the <em>Pay What You Want</em> model to the AppCentre, that allows you to support the developers if you can, but also try out the software before you commit.</p>
<p></p>
<p>In my searching the AppCentre, I also found a few applications that are technically exlusive to Elementary OS that I really liked. I&rsquo;m hesitant to use the word exclusive given the nature of open source, but in it&rsquo;s spirit, these apps can still be installed from source/Git with the associated dependencies on other distros.</p>
<p>For my usage I came across <a href="https://cassidyjames.com/" target="_blank" rel="noopener noreffer"><em>Ephemeral</em></a>, a good privacy web browser option with isolated windows, no history tracking, and ads/trackers blocked by it&rsquo;s nature (no over-ride options).</p>
<p></p>
<p>My second finding that is a nice draw to elementary was <a href="https://appcenter.elementary.io/com.github.artemanufrij.webpin/" target="_blank" rel="noopener noreffer"><em>WebPin</em></a>. A simple application for creating attractive shortcuts to websites as apps, running in a simple minimal window. While this function could mostly be obtained with a quickly crafted .Desktop file, using WebPin is a nice end user friendly option. In my case I was able to use it for easy dock shortcuts to <a href="https://protonmail.com" target="_blank" rel="noopener noreffer">ProtonMail</a>, my Subsonic music streaming and my MiniFlux RSS reader.</p>
<p>Once those were installed, for my usage at least, then it becomes necessary to expand beyond the confines of the AppCentre and take advantage of the normal Ubuntu core system at the base of elementary. For better media compatibility I did a few terminal <em>apt-get</em> commands to install components like <em>Ubuntu-Restricted-Extras</em>. I also was easily able to use the terminal to add PPAs (no pre-work like is 0.4 to be allowed to add PPAs), and get apps like <strong>Sublime Text</strong>, and <strong>Discord</strong>, as well as install Snaps like that for <strong>Bitwarden</strong>.</p>
<p>Returning to the operation and feel of the system once the remaining applications I use were setup, and it was great to see that despite the attractive interface, the memory usage was still healthy, coming in only a bit higher than my lighter weight Arch + i3wm build, seeing <em>640 MB</em> of memory used at idle:</p>
<p></p>
<p>As far as the overall interface, I was happy to see the simple <em>x</em> to close apps, vs. the previous versions strong copy of MacOS for closing and minimizing windows, with the coloured dots. The main dock on the bottom is pleaseant and easy to use and behaves properly for it&rsquo;s auto-hide functionality, especially great for full-screen writing. Pressing the Super (Windows) key gives a nice quick reference of keyboard shortcuts, making it easy to switch applications, move between workspaces, and take screenshots baked direct into the OS. (All the screens in this article are captured with that built in utility, no editing). Reviewing this shortcuts panel also reveals the very elementary unique <em>Picture in Picture</em> function, the ability to grab part of a window, great for video&rsquo;s, and layer it on another workspace:</p>
<p></p>
<p>The Picture in Picture option is a very neat and useful feature I have not seen in any other operating system as a baked in option, and yet is a simple keyboard shortcut to operate. It&rsquo;s evidence of elementary in my opinion doing an excellent job bringing a very end user friendly approach and consistent look and feel to Linux.</p>
<p><em>Do you sacrifice the extreme customizability that Linux is capable of?</em></p>
<blockquote>
<p>Yeah, at least to some extent, but if your in that camp like my current main system is, your an advanced user and can make your own educated decision.</p>
</blockquote>
<p><em>Is elementary just for &lsquo;regular end users&rsquo; and new users?</em></p>
<blockquote>
<p>Absolutly not, any advaned user can at minimum appreciate the volume of effort put in place to present a very cohesive and professional looking operating system. It&rsquo;s a system that is very easy to show both to basic end users and technical users that doubt linux or hold on to old statements or myths about linux, and show what it can be and is today.</p>
</blockquote>
<p>Finally, <em>how will I be using elementary OS after this review and setup?</em></p>
<blockquote>
<p>Without a doubt I&rsquo;m really liking what I&rsquo;m seeing with a mature elementary OS, the install I&rsquo;m writing on right now on my Cube i7 Book is staying with elementary, and I&rsquo;ll be circling back to several of the apps I downloaded free and using the <em>Pay What You Want</em> to pitch in to a few developers. Regarding my main Republic of Gamers laptop&hellip;I&rsquo;m still undecided. I&rsquo;ll detail my setup in another post, but that system is doing all my heavy work and all my gaming with an Arch Linux build and i3 window manager, meaning it&rsquo;s very customized. I really enjoy i3 and the rolling release model of Arch, but it&rsquo;s also hard to turn down the out of the box polish of elementary OS.</p>
</blockquote>
<p>Needless to say, elementary is a very easy pick to install or show off if your trying to bring over any windows users to a smoother, more secure and stable system. I&rsquo;m at a loss to suggest anything other than elementary for converting skeptics to linux, even avid PC gamers like myself.</p>]]></description></item><item><title>VIM Expedition</title><link>https://techzerker.com/2019-05-08-vim/</link><pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate><author>Author</author><guid>https://techzerker.com/2019-05-08-vim/</guid><description><![CDATA[<p>Why couldn&rsquo;t I just be fine with Nano and Sublime Text? I guess I can&rsquo;t help but be curious!</p>
<p></p>
<p>Up until a few days ago, my previous experience with VIM was limited. I&rsquo;ve been using Linux heavily for years now, and it was just an annoyance. In the past my only exposure to VIM was AUR install scripts or source builds that forced me to check build files via VIM. What that really meant was it was that annoying text program, that I had no clue how to quit when it suddenly was on my screen! <strong>:w</strong> to save, and <strong>:q</strong> to quit, but not if your in insert mode&hellip;what?</p>
<p>Well, now that&rsquo;s changing, progressively.</p>
<p>I believe the seed for it started at some point in my last work rotation, where for some reason my brain said I should go read a how-to article on VIM. I read the first blurb about moving around a document, and going into insert mode, and it mostly seemed unnecessary on its own. When I started to read combining commands together, like <em>5w</em> to move five words down, ( and ) for moving sentences and more&hellip;it started to <em>click</em>.</p>
<p>As VIM' own site says, they don&rsquo;t hold hands. It appears to be a very powerful text editor, but you have to learn the commands and try them out in your own workflow. So I studied a few more pages on VIM tutorials and understanding it&rsquo;s powers. Then, I became curious if it could support <em>MarkDown</em> for writing, and sure enough, <a href="https://github.com/plasticboy/vim-markdown" target="_blank" rel="noopener noreffer">VIM-MarkDown plugin</a>&hellip;easy! How could I paste from the web into VIM? In my case at least, <em>Shift + Left/Right Mouse Together</em>, given a lack of middle mouse on the laptop.</p>
<p>The end result of all this?</p>
<p>Well, this post was written in VIM with MarkDown syntax highlighting.</p>
<p>It was a very distraction free writing environment. Finally, even at my novice level, it was easy to move around the document and get familiar with the commands. It&rsquo;s not hard to see that it has a steep learning curve, but especially on longer articles and research notes, how easy it can make working with text.</p>
<p>I am not a committed VIM user yet, but this is definitely an extended expedition into foreign lands, and other than the confusing signs, is quite intriguing and worth further exploration.</p>]]></description></item></channel></rss>